/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wahlomat;

import java.awt.Image;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import javax.swing.JDialog;
import javax.swing.event.TableModelEvent;

/**
 * Main Form WahlOMat
 * @author amederake
 */
public class Ausgabe extends javax.swing.JFrame
{

    /* Class Variables */
    private static ArrayList<Staaten_Stochastik> Auswertung;
    private static ArrayList<Staaten_Stochastik> AuswertungFix;
    private int RepCount;
    private JDialog dlg;

    /**
     * Creates new form Ausgabe
     */
    public Ausgabe()
    {
        initComponents();
        this.setLocation(200, 0);
        btnPutinFix.setVisible(false);
        dlg = new JDialog(this);
        ImagePanel putin = new ImagePanel("./daten/putin1.jpg");
        dlg.setSize(200, 600);
        dlg.add(putin);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        btnPutinFix = new javax.swing.JButton();
        btnCalcVote = new javax.swing.JButton();
        lblWinnerTxt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPutinFix.setBackground(new java.awt.Color(255, 0, 0));
        btnPutinFix.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPutinFix.setText("Putin-Fix");
        btnPutinFix.setBorder(null);
        btnPutinFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makePutinFix(evt);
            }
        });

        btnCalcVote.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCalcVote.setText("Wahlergebnis berechnen");
        btnCalcVote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeVote(evt);
            }
        });

        lblWinnerTxt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblWinnerTxt.setForeground(new java.awt.Color(0, 0, 255));
        lblWinnerTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addComponent(btnCalcVote, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWinnerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPutinFix, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblWinnerTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPutinFix, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCalcVote, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dataTable.setAutoCreateRowSorter(true);
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Bundesstaat", "Wahlberechtigt", "Wahlbeteiligung", "Republikaner", "in %", "Demokraten", "in  %", "Governeur"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        dataTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(dataTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * action for "Wahlergebnis berechnen" Button
     *
     * @param evt
     */
    private void makeVote(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeVote
        dlg.setVisible(false);
        loadData();
        calcVote();
        AuswertungFix = Auswertung;
        fillTable(Auswertung);
        FakeNews();
        RepCount = selectWinner();
        if (RepCount < 26)
        {
            lblWinnerTxt.setForeground(new java.awt.Color(0, 0, 255));
            lblWinnerTxt.setText("Die Demokraten gewinnen die Wahl in " + (51 - RepCount) + " Staaten");
            btnPutinFix.setVisible(true);
        } else
        {
            lblWinnerTxt.setForeground(new java.awt.Color(255, 0, 0));
            lblWinnerTxt.setText("Die Republikaner gewinnen die Wahl in " + RepCount + " Staaten");
            dlg.setVisible(true);
        }
    }//GEN-LAST:event_makeVote

    /**
     * action for "Putin-Fix" Button
     *
     * @param evt
     */
    private void makePutinFix(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makePutinFix
        int toFix = 26 + Zufallszahlen(5) - RepCount;
        int fixed = 0;
        Staaten_Stochastik stateData;
        for (int i = 0; i < AuswertungFix.size(); i++)
        {
            stateData = AuswertungFix.get(i);
            if (stateData.Orientation() != "R"
                    && stateData.Orientation() != "D"
                    && stateData.DemErginProz() > stateData.RepErginProz()
                    && fixed < toFix)
            {
                int tmp1 = stateData.Dem();
                double tmp2 = stateData.DemErginProz();
                stateData.Dem(stateData.Rep());
                stateData.DemErginProz(stateData.RepErginProz());
                stateData.Rep(tmp1);
                stateData.RepErginProz(tmp2);
                stateData.Gouverneur("Republikaner");
                fixed++;
            }
        }
        fillTable(AuswertungFix);
        lblWinnerTxt.setForeground(new java.awt.Color(255, 0, 0));
        lblWinnerTxt.setText("Die Republikaner gewinnen die Wahl in " + (RepCount + fixed) + " Staaten");
        btnPutinFix.setVisible(false);
        dlg.setVisible(true);
    }//GEN-LAST:event_makePutinFix

    /**
     * Load data from csv file, store state data in object and the objects in ArrayList
     */
    private static void loadData()
    {
        Auswertung = new ArrayList<Staaten_Stochastik>();
        Staaten_Stochastik stateData;
        CSVReader reader = new CSVReader("./daten/uselections.csv", ";", true);
        if (reader.ReadFile())
        {
            ArrayList<String[]> data = reader.getData();
            if (data.size() > 0)
            {
                String[] state;
                for (int i = 0; i < data.size(); i++)
                {
                    state = data.get(i);
                    stateData = new Staaten_Stochastik();
                    stateData.StateName(state[0]);
                    stateData.Orientation(state[1]);
                    stateData.Wahlber(new Integer(state[2]));
                    int pos = state[3].indexOf(",");
                    if (pos > 0)
                    {
                        state[3] = state[3].substring(0, pos) + "." + state[3].substring(pos + 1, state[3].length());
                    }
                    stateData.VoterTurnOut(new Double(state[3]));
                    Auswertung.add(stateData);
                }
            }
        }
    }

    /**
     * write file FakeNews
     */
    private void FakeNews()
    {
        File news = new File("FakeNews.csv");
        PrintWriter pWriter = null;

        /* delete File, if exists */
        if (news.isFile())
        {
            news.delete();
        }

        /* create new file and write data */
        try
        {
            Staaten_Stochastik stateData;
            pWriter = new PrintWriter(new BufferedWriter(new FileWriter("FakeNews.csv")));
            for (int i = 0; i < Auswertung.size(); i++)
            {
                stateData = Auswertung.get(i);
                String data;
                data = stateData.StateName() + ",";
                data += stateData.Wahlber() + ",";
                data += stateData.Voter() + ",";
                data += stateData.Rep() + ",";
                data += stateData.RepErginProz() + ",";
                data += stateData.Dem() + ",";
                data += stateData.DemErginProz() + ",";
                data += stateData.Gouverneur();
                pWriter.println(data);

            }

        } catch (IOException e)
        {
        } finally
        {
            /* flush and close pWriter */
            if (pWriter != null)
            {
                pWriter.flush();
                pWriter.close();
            }
        }
    }

    /**
     * calculate and store votes
     */
    private void calcVote()
    {
        Staaten_Stochastik stateData;
        for (int i = 0; i < Auswertung.size(); i++)
        {
            stateData = Auswertung.get(i);
            stateData.Voter(BerechnungWaehler(stateData.Wahlber(), stateData.VoterTurnOut()));
            int ergDem = BerechnungErgebnisDem();
            stateData.DemErginProz(ergDem);
            stateData.RepErginProz(BerechnungErgebnisRep(ergDem));
            int votDem = BerechnungVoterDem(ergDem, stateData.Voter());
            stateData.Dem(votDem);
            stateData.Rep(BerechnungVoterRep(votDem, stateData.Voter()));
            if (ergDem > 50)
            {
                stateData.Gouverneur("Demokraten");
            } else
            {
                stateData.Gouverneur("Republikaner");
            }
            Auswertung.set(i, stateData);
        }
    }

    /**
     * count winner states of the republikan
     *
     * @return  // count of republican states
     */
    private int selectWinner()
    {
        Staaten_Stochastik stateData;
        int iCount = 0;
        for (int i = 0; i < Auswertung.size(); i++)
        {
            stateData = Auswertung.get(i);
            if (stateData.RepErginProz() > 50)
            {
                iCount++;
            }
        }
        return iCount;
    }

    /**
     * fill jtable with vote data
     *
     * @param data
     */
    private void fillTable(ArrayList<Staaten_Stochastik> data)
    {
        Staaten_Stochastik state;
        if (data.size() > 0)
        {
            for (int i = 0; i < data.size(); i++)
            {
                state = data.get(i);
                dataTable.setValueAt(state.StateName(), i, 0);
                dataTable.setValueAt(state.Wahlber(), i, 1);
                dataTable.setValueAt(state.Voter(), i, 2);
                dataTable.setValueAt(state.Rep(), i, 3);
                dataTable.setValueAt(state.RepErginProz(), i, 4);
                dataTable.setValueAt(state.Dem(), i, 5);
                dataTable.setValueAt(state.DemErginProz(), i, 6);
                dataTable.setValueAt(state.Gouverneur(), i, 7);
                dataTable.tableChanged(new TableModelEvent(dataTable.getModel(), i));
            }
        }
    }

    /**
     * calculate voters
     *
     * @param iWahlber
     * @param dblVoterTurnOut
     * @return
     */
    private int BerechnungWaehler(int iWahlber, double dblVoterTurnOut)
    {
        return (int) (iWahlber * dblVoterTurnOut / 100);
    }

    /**
     * calculate the result for democrats
     *
     * @return
     */
    private int BerechnungErgebnisDem()
    {
        int iErgebnisDem = 40 + Zufallszahlen(20);
        return iErgebnisDem;
    }

    /**
     * calculate republikan result in percent
     *
     * @param iErgebnisDem
     * @return
     */
    private int BerechnungErgebnisRep(int iErgebnisDem)
    {
        int iErgebnisRep = 100 - iErgebnisDem;
        return iErgebnisRep;
    }

    /**
     * calculate voters for democrats
     *
     * @param iErgebnisDem
     * @param iWaehler
     * @return
     */
    private int BerechnungVoterDem(int iErgebnisDem, int iWaehler)
    {
        int iWertDem = iWaehler * iErgebnisDem / 100;
        return iWertDem;
    }

    /**
     * calculate voters for republican
     *
     * @param iWertDem
     * @param iWaehler
     * @return
     */
    private int BerechnungVoterRep(int iWertDem, int iWaehler)
    {
        int iWertRep = iWaehler - iWertDem;
        return iWertRep;
    }

    /**
     * reurn a random number
     *
     * @param iObGrz
     * @return
     */
    private int Zufallszahlen(int iObGrz)
    {
        Random rand = new Random();
        return rand.nextInt(iObGrz);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcVote;
    private javax.swing.JButton btnPutinFix;
    private javax.swing.JTable dataTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblWinnerTxt;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
